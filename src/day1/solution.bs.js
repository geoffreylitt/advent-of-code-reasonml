// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Tablecloth = require("tablecloth-bucklescript/src/tablecloth.bs.js");

function fuelForMass(mass) {
  return (mass / 3 | 0) - 2 | 0;
}

function fuelForMassStr(massStr) {
  var mass = Tablecloth.$$String.toInt(massStr);
  if (mass.tag) {
    return 0;
  } else {
    return fuelForMass(mass[0]);
  }
}

var func = Tablecloth.List.map;

var func$1 = Tablecloth.$$String.split;

var arg = Fs.readFileSync("inputs/input01.txt", "utf8");

var arg$1 = (function (param) {
      return Curry._2(func$1, param, arg);
    })("\n");

var part1 = Tablecloth.List.sum((function (param) {
          return Curry._2(func, param, arg$1);
        })(fuelForMassStr));

console.log("part 1: " + String(part1));

function fuelForMassRec(mass) {
  var fuel = fuelForMass(mass);
  if (fuel < 0) {
    return 0;
  } else {
    return fuel + fuelForMassRec(fuel) | 0;
  }
}

function fuelForMassStrRec(massStr) {
  var mass = Tablecloth.$$String.toInt(massStr);
  if (mass.tag) {
    return 0;
  } else {
    return fuelForMassRec(mass[0]);
  }
}

var func$2 = Tablecloth.List.map;

var func$3 = Tablecloth.$$String.split;

var arg$2 = Fs.readFileSync("inputs/input01.txt", "utf8");

var arg$3 = (function (param) {
      return Curry._2(func$3, param, arg$2);
    })("\n");

var part2 = Tablecloth.List.sum((function (param) {
          return Curry._2(func$2, param, arg$3);
        })(fuelForMassStrRec));

console.log("part 2, recursive: " + String(part2));

exports.fuelForMass = fuelForMass;
exports.fuelForMassStr = fuelForMassStr;
exports.part1 = part1;
exports.fuelForMassRec = fuelForMassRec;
exports.fuelForMassStrRec = fuelForMassStrRec;
exports.part2 = part2;
/* part1 Not a pure module */
