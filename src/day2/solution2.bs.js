// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Tablecloth = require("tablecloth-bucklescript/src/tablecloth.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var input = "1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,6,23,2,6,23,27,2,27,9,31,1,5,31,35,1,35,10,39,2,39,9,43,1,5,43,47,2,47,10,51,1,51,6,55,1,5,55,59,2,6,59,63,2,63,6,67,1,5,67,71,1,71,9,75,2,75,10,79,1,79,5,83,1,10,83,87,1,5,87,91,2,13,91,95,1,95,10,99,2,99,13,103,1,103,5,107,1,107,13,111,2,111,9,115,1,6,115,119,2,119,6,123,1,123,6,127,1,127,9,131,1,6,131,135,1,135,2,139,1,139,10,0,99,2,0,14,0";

function parse(str) {
  var func = Tablecloth.List.map;
  var arg = Tablecloth.$$String.split(",", str);
  return Tablecloth.$$Array.from_list((function (param) {
                  return Curry._2(func, param, arg);
                })((function (str) {
                    return Tablecloth.Result.withDefault(0, Tablecloth.$$String.to_int(str));
                  })));
}

var UnknownOpcode = Caml_exceptions.create("Solution2-AdventOfCode2019.UnknownOpcode");

var MissingValue = Caml_exceptions.create("Solution2-AdventOfCode2019.MissingValue");

var BadProgram = Caml_exceptions.create("Solution2-AdventOfCode2019.BadProgram");

function intToOpcode($$int) {
  var switcher = $$int - 1 | 0;
  if (switcher === 0 || switcher === 1) {
    if (switcher !== 0) {
      return /* Multiply */1;
    } else {
      return /* Add */0;
    }
  } else if (switcher !== 98) {
    throw UnknownOpcode;
  } else {
    return /* Halt */2;
  }
}

function getPointer(array, index) {
  var func = Tablecloth.$$Option.andThen;
  var arg = Tablecloth.$$Array.get(index, array);
  var result = (function (param) {
        return Curry._2(func, param, arg);
      })((function (i) {
          return Tablecloth.$$Array.get(i, array);
        }));
  if (result !== undefined) {
    return result;
  } else {
    throw BadProgram;
  }
}

function setPointer(array, index, value) {
  var match = Tablecloth.$$Array.get(index, array);
  var idxToSet;
  if (match !== undefined) {
    idxToSet = match;
  } else {
    throw BadProgram;
  }
  Tablecloth.$$Array.set(idxToSet, value, array);
  return array;
}

function add(program, index) {
  var num1 = getPointer(program, index + 1 | 0);
  var num2 = getPointer(program, index + 2 | 0);
  return setPointer(program, index + 3 | 0, num1 + num2 | 0);
}

function multiply(program, index) {
  var num1 = getPointer(program, index + 1 | 0);
  var num2 = getPointer(program, index + 2 | 0);
  return setPointer(program, index + 3 | 0, Caml_int32.imul(num1, num2));
}

function interpret(_program, _index) {
  while(true) {
    var index = _index;
    var program = _program;
    var value = Tablecloth.$$Array.get(index, program);
    var opcode;
    if (value !== undefined) {
      opcode = intToOpcode(value);
    } else {
      throw MissingValue;
    }
    var newProgram;
    switch (opcode) {
      case /* Add */0 :
          newProgram = add(program, index);
          break;
      case /* Multiply */1 :
          newProgram = multiply(program, index);
          break;
      case /* Halt */2 :
          newProgram = program;
          break;
      
    }
    if (opcode >= 2) {
      return program;
    } else {
      _index = index + 4 | 0;
      _program = newProgram;
      continue ;
    }
  };
}

function run(input) {
  return interpret(parse(input), 0);
}

var output = interpret(parse(input), 0);

console.log(output);

var testInput = "1,1,1,4,99,5,6,0,99";

exports.input = input;
exports.testInput = testInput;
exports.parse = parse;
exports.UnknownOpcode = UnknownOpcode;
exports.MissingValue = MissingValue;
exports.BadProgram = BadProgram;
exports.intToOpcode = intToOpcode;
exports.getPointer = getPointer;
exports.setPointer = setPointer;
exports.add = add;
exports.multiply = multiply;
exports.interpret = interpret;
exports.run = run;
exports.output = output;
/* output Not a pure module */
